import os
import httpx
from typing import Dict, List, Any
import dotenv
import asyncio

# Load environment variables explicitly
dotenv.load_dotenv(os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), '.env'))

# SerpAPI base URL
SERPAPI_BASE_URL = "https://serpapi.com/search"

async def search_fashion_items(search_queries: List[str], results_per_query: int = 5) -> List[Dict[str, Any]]:
    """
    Search for fashion items using SerpAPI based on multiple generated search queries.
    
    Args:
        search_queries: List of search queries generated by OpenAI
        results_per_query: Number of results to return per query (default: 5)
    
    Returns:
        List[Dict]: List of fashion recommendations with details
    """
    api_key = os.getenv("SERPAPI_API_KEY")
    if not api_key:
        raise ValueError("SERPAPI_API_KEY environment variable is not set")
    
    # Create a list to store all recommendations
    all_recommendations = []
    
    # Process each search query
    tasks = []
    for query in search_queries:
        task = search_single_query(query, api_key, results_per_query)
        tasks.append(task)
    
    # Run all search queries concurrently
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # Combine results
    for result in results:
        if isinstance(result, list):  # Skip exceptions
            all_recommendations.extend(result)
    
    # If we have too many results, limit them
    max_total_results = min(20, len(all_recommendations))
    return all_recommendations[:max_total_results]

async def search_single_query(search_query: str, api_key: str, num_results: int = 5) -> List[Dict[str, Any]]:
    """
    Search for fashion items using a single query.
    
    Args:
        search_query: The search query
        api_key: SerpAPI key
        num_results: Number of results to return
    
    Returns:
        List[Dict]: List of fashion recommendations
    """
    # Prepare query parameters
    params = {
        "q": search_query + " fashion clothing",
        "api_key": api_key,
        "engine": "google",
        "google_domain": "google.com",
        "gl": "us",
        "hl": "en",
        "tbm": "shop",  # Shopping results
        "num": num_results
    }
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(SERPAPI_BASE_URL, params=params)
            response.raise_for_status()
            data = response.json()
            
            # Extract shopping results
            shopping_results = data.get("shopping_results", [])
            
            # Process and format the results
            recommendations = []
            for item in shopping_results:
                # Extract the correct product link
                product_link = item.get("link", "")
                
                # If the link doesn't start with http or https, add it
                if product_link and not (product_link.startswith("http://") or product_link.startswith("https://")):
                    product_link = "https://" + product_link
                
                # Add the search query that found this item
                recommendation = {
                    "title": item.get("title", ""),
                    "link": product_link,
                    "source": item.get("source", ""),
                    "price": item.get("price", ""),
                    "thumbnail": item.get("thumbnail", ""),
                    "rating": item.get("rating", None),
                    "reviews": item.get("reviews", None),
                    "extensions": item.get("extensions", []),
                    "search_query": search_query  # Add the search query for reference
                }
                recommendations.append(recommendation)
            
            return recommendations
    except Exception as e:
        print(f"Error calling SerpAPI for query '{search_query}': {str(e)}")
        # Return empty list in case of error
        return []
